import 'package:over_react/over_react.dart';

import '../shared/demo_components.dart';
import 'mui_basic_example.dart';
import 'options_examples.dart';
import 'over_react_specific_examples.dart';

part 'example_entrypoint.over_react.g.dart'; // ignore: uri_has_not_been_generated

mixin ExampleEntrypointProps on UiProps {}

UiFactory<ExampleEntrypointProps> ExampleEntrypoint = uiFunction(
  (props) {
    return Fragment()(
      (ExampleGroup()
        ..groupTitle = 'MUI Docs Examples'
        ..groupSubTitle =
            'Examples pulled directly from the MUI Docs to demonstrate a specific behavior.'
      )(
        (ExampleBlock()
          ..exampleBlockTitle = 'Basic HOC Button'
          ..exampleBlockDescription =
              'Static styles can be applied using `withStyles`.'
        )(
          (Example()..exampleTitle = 'No Styles')(
            HigherOrderComponent()(),
          ),
          (Example()..exampleTitle = 'Styles')(
            HigherOrderComponentWithStyles()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Dynamic Styles'
          ..exampleBlockDescription =
              'Styles can be dynamically generated by using (or not using) a prop.'
        )(
          (Example()..exampleTitle = 'No Styles')(
            MyButtonRaw()('No Color'),
          ),
          (Example()..exampleTitle = 'Styles')(
            (MyButton()..color = 'red')('Red'),
            (MyButton()..color = 'Blue')('Blue'),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Nested Styling'
          ..exampleBlockDescription =
              'Parent components can render children and apply their own class. '
                  'Inspect the DOM and notice that the parent class "my-label" is applied after the '
                  'generated class.'
        )(
          Example()(
            Parent()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Themed Example'
          ..exampleBlockDescription =
              'A component can use styles created via a function that takes in a theme.'
        )(
          Example()(
            ThemedButtonWithStyles()(),
          ),
        ),
      ),
      (ExampleGroup()
        ..groupTitle = '`withStyles` Options Examples'
        ..groupSubTitle =
            'Examples meant to demonstrate that a specific API option functions as expected.'
      )(
        (ExampleBlock()
          ..exampleBlockTitle = 'Backup theme'
          ..exampleBlockDescription =
              'A backup theme can be supplied that will override the less specific theme '
                  '(the default, in this case).'
        )(
          (Example())(
            CustomThemedButtonWithStyles()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Custom Style Element'
          ..exampleBlockDescription =
              'A style element can be provided that is injected into the DOM, instead of '
                  'one being auto-generated. Inspect the DOM, and in the header notice the style tag with '
                  'the id "custom-style-tag".'
        )(
          (Example())(
            CustomStyleElementWithStyles()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Media Option'
          ..exampleBlockDescription =
              'The API takes in a "media option" item that adds the value for the '
                  '"media" attribute on the style tag. Inspect the DOM and notice the style tag '
                  'with the `media="print"` attribute.'
        )(
          Example()(
            MediaOptionButtonWithStyles()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Specified Index'
          ..exampleBlockDescription =
              'An index can be passed into the API to increase specificity. '
                  'Notice that when inspecting the DOM, there is a style tag for this example'
                  'with the `meta` attribute "This should be the last style tag in the header". '
                  'This _is_ the last style tag because of the index.'
        )(
          Example()(
            ThemedButtonWithStyles()(),
          ),
        ),
        (ExampleBlock()
          ..exampleBlockTitle = 'Misc.'
          ..exampleBlockDescription =
              'The name and meta fields options can both be set. '
                  'When inspecting the DOM, style class names will be prefixed with'
                  'the "name" option value, and the style tag will have the `meta` attribute '
                  'set to the specified meta option value.'
        )(
          Example()(
            MiscOptionsWithStyles()(),
          ),
        ),
      ),
      (ExampleGroup()
        ..groupTitle = 'OverReact Specific Examples'
        ..groupSubTitle =
            'Examples that target an OverReact specific usecase.'
      )(
        (ExampleBlock()
          ..exampleBlockTitle = 'A Class Based Component'
          ..exampleBlockDescription =
              'Because all the other examples are for function based '
                  'components (which match the doc\'s examples most closely, this example'
                  'just shows that it works to wrap an OverReact UiComponent as well.'
        )(
          (StyledClassBasedComponent()..color = 'blue')(),
        ),
      ),
    );
  },
  $ExampleEntrypointConfig, // ignore: undefined_identifier
);
